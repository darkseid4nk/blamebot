 #!/bin/bash
 # /etc/init.d/minecraft
 # version 0.4.2 2016-02-09 (YYYY-MM-DD)
 #
 ### BEGIN INIT INFO
 # Provides:   minecraft
 # Required-Start: $local_fs $remote_fs screen-cleanup
 # Required-Stop:  $local_fs $remote_fs
 # Should-Start:   $network
 # Should-Stop:    $network
 # Default-Start:  2 3 4 5
 # Default-Stop:   0 1 6
 # Short-Description:    Minecraft server
 # Description:    Starts the minecraft server
 ### END INIT INFO

 #Settings
 USERNAME="root"
 SERVICE='server.jar'
 SCREENNAME='minecraft'
 OPTIONS='nogui'
 WORLD='world'
 MCPATH='/opt/mcserver'
 BACKUPPATH='/opt/mcserverbackups'
 MAXHEAP=28
 MINHEAP=24
 HISTORY=1024
 CPU_COUNT=4
 INVOCATION="java -Xmx${MAXHEAP}G -Xms${MINHEAP}G -XX:+UseConcMarkSweepGC \
 -XX:+CMSIncrementalPacing -XX:ParallelGCThreads=$CPU_COUNT -XX:+AggressiveOpts \
 -jar $SERVICE $OPTIONS"

 mc_start() {
   if   pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
     echo "$SERVICE is already running!"
   else
     echo "Starting $SERVICE..."
     cd $MCPATH
     cd $MCPATH &&  screen -h $HISTORY -dmS ${SCREENNAME} $INVOCATION
     sleep 7
     if  pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
       echo "$SERVICE is now running."
     else
       echo "Error! Could not start $SERVICE!"
     fi
   fi
 }

 mc_saveoff() {
   if  pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
     echo "$SERVICE is running... suspending saves"
      screen -p 0 -S ${SCREENNAME} -X stuff "say [OP $SUDO_USER] Server backup initiated. Backup will start in 30 seconds.\015"
      screen -p 0 -S ${SCREENNAME} -X stuff "say [OP $SUDO_USER] Nothing you do will save during backup!\015"
      count=30
      while [ "$count" -ge 1 ]; do
          count=$(( $count - 1 ))
          screen -p 0 -S ${SCREENNAME} -X stuff "say [OP $SUDO_USER] SERVER BACKUP IN $count...\015"
          echo "server backup in $count..."
          sleep 1;
      done

      screen -p 0 -S ${SCREENNAME} -X stuff "say [OP $SUDO_USER] SERVER BACKUP STARTING. THIS WILL TAKE A WHILE SIT TIGHT. Server going readonly... Anything you do will not save until this is complete\015"
      screen -p 0 -S ${SCREENNAME} -X stuff "save-off\015"
      screen -p 0 -S ${SCREENNAME} -X stuff "save-all\015"
     sync
     sleep 10
   else
     echo "$SERVICE is not running. Not suspending saves."
   fi
 }

 mc_saveon() {
   if  pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
     echo "$SERVICE is running... re-enabling saves"
      screen -p 0 -S ${SCREENNAME} -X stuff "save-on\015"
      screen -p 0 -S ${SCREENNAME} -X stuff "say [OP $SUDO_USER] SERVER BACKUP ENDED. Server going read-write...\015"
      screen -p 0 -S ${SCREENNAME} -X stuff "say [OP $SUDO_USER] Sorry for the interuption. You may now go back to playing.\015"
   else
     echo "$SERVICE is not running. Not resuming saves."
   fi
 }

 mc_stop() {
   if  pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
     echo "Stopping $SERVICE"
      screen -p 0 -S ${SCREENNAME} -X stuff "say [OP $SUDO_USER] SERVER SHUTTING DOWN IN 20 SECONDS. Saving map...\015"
      count=20
      while [ "$count" -ge 1 ]; do
          count=$(( $count - 1 ))
          screen -p 0 -S ${SCREENNAME} -X stuff "say [OP $SUDO_USER] SERVER SHUTDOWN IN $count...\015"
          echo "server shutdown in $count..."
         sleep 1;
      done

      screen -p 0 -S ${SCREENNAME} -X stuff "save-all\015"
      screen -p 0 -S ${SCREENNAME} -X stuff "stop\015"
     sleep 7
   else
     echo "$SERVICE was not running."
   fi
   if  pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
     echo "Error! $SERVICE could not be stopped."
   else
     echo "$SERVICE is stopped."
   fi
 }

 mc_backup() {
    mc_saveoff

    NOW=`date "+%Y-%m-%d_%Hh%M"`
    BACKUP_FILE="$BACKUPPATH/${WORLD}_${NOW}.tar"
    echo "Backing up minecraft world, anything you do will not save until this is complete..."
     tar -C "$MCPATH" -cf "$BACKUP_FILE" $WORLD

    echo "Backing up $SERVICE"
     tar -C "$MCPATH" -rf "$BACKUP_FILE" $SERVICE

    mc_saveon

    echo "Compressing backup..."
     gzip -f "$BACKUP_FILE"
    echo "Done."
 }

 mc_command() {
   command="$1";
   if  pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
     pre_log_len=`wc -l "$MCPATH/logs/latest.log" | awk '{print $1}'`
     echo "$SERVICE is running... executing command"
      screen -p 0 -S ${SCREENNAME} -X stuff "say [OP $SUDO_USER] has used their godly power!\015"
      screen -p 0 -S ${SCREENNAME} -X stuff "$command\015"
     sleep .1 # assumes that the command will run and print to the log file in less than .1 seconds
     # print output
      tail -n $((`wc -l "$MCPATH/logs/latest.log" | awk '{print $1}'`-$pre_log_len)) "$MCPATH/logs/latest.log"
   fi
 }

 #Start-Stop here
 case "$1" in
   start)
     mc_start
     ;;
   stop)
     mc_stop
     ;;
   restart)
     mc_stop
     mc_start
     ;;
   backup)
     mc_backup
     ;;
   status)
     if  pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
       echo "$SERVICE is running."
     else
       echo "$SERVICE is not running."
     fi
     ;;
   command)
     if [ $# -gt 1 ] ; then
       shift
       mc_command "$*"
     else
       echo "Must specify server command (try 'help'?)"
     fi
     ;;

   *)
   echo "Usage: $0 {start|stop|backup|status|restart|command \"server command\"}"
   exit 1
   ;;
 esac

 exit 0
